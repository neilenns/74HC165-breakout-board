{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1. KiBot automation",
  "steps": [
    {
      "title": "Introduction",
      "description": "This GitHub repo demonstrates how to use KiBot with GitHub actions to get CI/CD of KiCad designs. It includes:\n\n* Support for local develompent and testing of KiBot scripts via Visual Studio Code Remote Containers\n* ERC/DRC verification on GitHub pull requests\n* Documentation and fabrication house submission generation on GitHub release creation, including inserting the GitHub release version and date into the schematic and PCB design.\n\nThe release process generates:\n\n* A PDF of the schematic\n* PDFs of the front and back of the board\n* An interactive bill of materials\n* JPEG renders of the front and back of the board\n* STEP model of the board\n* JLCPCB submission files, including gerbers, drill position files, BOM, and position files for their SMT service\n* PCBWay submission files, including gerbers and drill position files \n\nTo test this locally open the git repo in a Visual Studio Code remote container then [run the default build task](command:workbench.action.tasks.build)."
    },
    {
      "file": ".kibot/preflight.kibot.yaml",
      "description": "This script does basic preflight checks for a schematic. It runs ERC and DRC checks but does not generate any output files.",
      "line": 1,
      "title": "Preflight script"
    },
    {
      "file": ".kibot/preflight.kibot.yaml",
      "description": "To require ERC to pass during pull requests set this to true.",
      "line": 32,
      "title": "Enabling ERC checks on pull requests"
    },
    {
      "file": ".kibot/preflight.kibot.yaml",
      "description": "To require DRC to pass on pull requests set this to true.",
      "line": 33,
      "title": "Enabling DRC checks on pull requests"
    },
    {
      "file": ".kibot/release.kibot.yaml",
      "description": "This script handles the release file generation. It sets some global variables then imports specific output scripts from the `includes/` folder.",
      "line": 1,
      "title": "Release script"
    },
    {
      "file": ".kibot/release.kibot.yaml",
      "description": "To require ERC to pass when creating a release set this to true.",
      "line": 31,
      "title": "Enabling ERC checks on releases"
    },
    {
      "file": ".kibot/release.kibot.yaml",
      "description": "To require DRC to pass when creating a release set this to true.",
      "line": 32,
      "title": "Enabling DRC checks on pull requests"
    },
    {
      "file": ".kibot/documentation-only.kibot.yaml",
      "description": "This script doesn't do ERC or DRC and just generates all the documentation files. It's called from the documentation-only.yaml GitHub action, which is triggered manually from GitHub whenever documentation should be generated.",
      "line": 1,
      "title": "Documentation only script"
    },
    {
      "file": ".kibot/release.kibot.yaml",
      "description": "These imports are how KiBot knows what outputs to generate. To add support for another fabrication house create a .kibot.yaml file in `includes/` then include it here.",
      "line": 52,
      "title": "Importing output definitions"
    },
    {
      "directory": ".kibot/includes",
      "description": "The `includes/` folder contains KiBot scripts for various types of output:\n\n* documentation-2layer.kibot.yaml: Generates documentation files (PDFs, images, interactive BOM) for a two layer board\n* JLCPCB-2layer.kibot.yaml: Generates gerbers, drill positions, BOM and position files for submitting to JLCPCB\n* PCBWay-2layer.kibot.yaml: Generates gerbers and drill positions for submitting to PCBWay\n\nTo add support for another fabrication house create a new .kibot.yaml file with the required output settings then add it\nto the imports section of `release.kibot.yaml`.",
      "title": "Output definitions"
    }
  ],
  "isPrimary": true
}
